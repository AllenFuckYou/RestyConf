worker_processes 1;
pid logs/nginx.pid;
error_log logs/error.log info;

events {
	worker_connections 10000;
	accept_mutex on;
}

http {
	access_log logs/access.log;
	charset utf-8;
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;

	lua_package_path "$prefix/lua/?.lua;$prefix/resty_modules/lualib/?.lua;;";
	lua_code_cache off;
	init_by_lua_block {
		-- preload lua module
		require "resty.http"
	}

	server {
		listen 9090;
		listen [::]:9090;

		location /hello {
			content_by_lua_file lua/web.lua;
		}

		location /websocket {
			lua_socket_log_errors on;
			lua_check_client_abort on;
			content_by_lua_file lua/websocket.lua;
		}

		location / {
			root html;
			index index.html;
        }
	}
}

stream {

	upstream game {
		server 127.0.0.1:9001;
	}

	error_log logs/error_stream.log info;

	lua_package_path "$prefix/lua/?.lua;$prefix/resty_modules/lualib/?.lua;;";
	lua_package_cpath "$prefix/lua/?.so;$prefix/resty_modules/lualib/?.so;;";
	# lua代码缓存,开发期间为off,上线后改为on,否则每个请求都会创建Lua VM实例。
	lua_code_cache off;
	lua_socket_log_errors on;
	lua_check_client_abort on;
	# 共享全局变量，在所有worker间共享
	lua_shared_dict shared_data 100m;

	# 最大等待任务数(定时器等)
	lua_max_pending_timers 1024;
	# 最大同时运行任务数
	lua_max_running_timers 256;

	init_by_lua_file lua/init.lua;
	init_worker_by_lua_file lua/init_worker.lua;

	# 添加自定义变量,可以用ngx.var.proxy访问或者在nginx.conf文件中直接使用:proxy_pass $proxy;
	lua_add_variable $proxy;
	# 定义配置变量，ngx.var中可以读到
	# set $redis_host 127.0.0.1;
	# set $redis_port 6379;
	server {
		listen 8086;
		error_log logs/error_stream_8086.log info;
		# error_log /dev/stdout info;

		# 在转发之前读取socket内容，content_by_lua_file是在转发之后，send to client 之前调用
		preread_by_lua_file lua/preread.lua;
		content_by_lua_file lua/stream.lua;
	}
}
